name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger on pushing to the main branch or merging into it
    tags:
      - 'v*'  # Trigger on versioned tags

permissions:
  contents: write # Used for the automatic releases

jobs:
  test:
    runs-on: [self-hosted, sentiment-app-master] # Running on a self-hosted runner
    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Build and run tests in Docker
        run: |
          sudo nerdctl build -t sentiment-app-test -f docker/testjob.Dockerfile .
          sudo nerdctl run --rm sentiment-app-test

  build:
    runs-on: [self-hosted, sentiment-app-master] # Running on a self-hosted runner
    needs: test  # This job will run after the test job

    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v2

      # Log in to Self-Hosted Docker Registry
      # - name: Log in to Self-Hosted Registry
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ${{ secrets.LOCAL_IMG_REG_IP }}
      #     username: ${{ secrets.LOCAL_IMG_REG_USER }}
      #     password: ${{ secrets.LOCAL_IMG_REG_PASS }}

      # - name: Log in to Self-Hosted Registry (nerdctl)
      #   run: |
      #     echo "${{ secrets.LOCAL_IMG_REG_PASS }}" | nerdctl login ${{ secrets.LOCAL_IMG_REG_IP }} -u ${{ secrets.LOCAL_IMG_REG_USER }} --password-stdin

      # Build the Docker image (fastapi and gradio)
      - name: Build Docker Images
        run: |
          sudo env REGISTRY_URL=${{ secrets.LOCAL_IMG_REG_IP }} nerdctl compose -f docker-compose.yml build
      
      # Push Docker images to Docker Hub
      - name: Push Docker Images
        run: |
          sudo env REGISTRY_URL=${{ secrets.LOCAL_IMG_REG_IP }} nerdctl compose -f docker-compose.yml push

  deploy:
    runs-on: [self-hosted, sentiment-app-master] # Running on a self-hosted runner
    needs: build  # This job will run after the build job

    steps:
      # Set up SSH key from GitHub secrets
      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.P_KEY }}
      
      # SSH into WSL and deploy
      - name: Deploy to WSL
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.USER }}@${{ secrets.IP }} -p ${{ secrets.PORT }} << 'EOF'
            # Log in to self-hosted registry
            echo "${{ secrets.LOCAL_IMG_REG_PASS }}" | docker login ${{ secrets.LOCAL_IMG_REG_IP }} -u ${{ secrets.LOCAL_IMG_REG_USER }} --password-stdin

            # Fetch the docker-compose.yml file
            wget -O /home/${{ secrets.USER }}/deployment/docker-compose.yml \
              https://raw.githubusercontent.com/KristofarStavrev/huggingface_model_deployment/main/docker-compose.yml
            
            # Fetch the promtail config file
            wget -O /home/${{ secrets.USER }}/deployment/promtail/promtail-config.yml \
              https://raw.githubusercontent.com/KristofarStavrev/huggingface_model_deployment/main/promtail/promtail-config.yml

            # Create .env file from secrets
            echo "LOKI_URL=${{ secrets.LOKI_URL }}" > /home/${{ secrets.USER }}/deployment/.env
            echo "PROMETHEUS_METRICS_USER=${{ secrets.PROMETHEUS_METRICS_USER }}" >> /home/${{ secrets.USER }}/deployment/.env
            echo "PROMETHEUS_METRICS_PASS=${{ secrets.PROMETHEUS_METRICS_PASS }}" >> /home/${{ secrets.USER }}/deployment/.env

            # Pull latest images and restart services
            cd /home/${{ secrets.USER }}/deployment &&
            REGISTRY_URL=${{ secrets.LOCAL_IMG_REG_IP }} docker compose -f docker-compose.yml pull &&
            REGISTRY_URL=${{ secrets.LOCAL_IMG_REG_IP }} docker compose -f docker-compose.yml down --remove-orphans &&
            REGISTRY_URL=${{ secrets.LOCAL_IMG_REG_IP }} docker compose -f docker-compose.yml up -d
            docker image prune -f
          EOF

  release:
    runs-on: [self-hosted, sentiment-app-master]
    needs: deploy  # Runs after deployment is complete
    if: startsWith(github.ref, 'refs/tags/')  # Only runs if a tag is pushed

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: "Automated release for version ${{ github.ref_name }}."
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
